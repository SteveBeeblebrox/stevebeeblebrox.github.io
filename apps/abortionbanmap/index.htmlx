<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Abortion Ban Map</title>
        %{SCRIPTS}
        <style type="text/less">
            html {
                display: flex;
                margin: 0;
                padding: 0;
                height: 100vh;
                width: 100vw;
                body {
                    &>span:first-child {
                        color: silver;
                        position: fixed;
                        top: 1em;
                        left: 1em;
                        font-size: x-small;
                    }
                    width: 100%;
                    background-color: whitesmoke;
                    color: #333;
                    font-family: Arial;
                    display: flex;
                    flex-direction: column;
                    justify-content: space-evenly;
                    padding: 1em;
                    overflow: hidden;
                }
            }
            :root {
                --status-color-trigger: rgb(183, 8, 8);
                --status-color-banned: rgb(223, 42, 42);
                --status-color-limited: rgb(236, 130, 30);
                --status-color-unknown: rgb(143, 143, 143);
                --status-color-ok: rgb(26, 194, 90);
                --status-color-at-risk: rgb(238, 213, 87);
                --status-color-other: rgb(218, 70, 195);
                --status-color-protected: rgb(20, 20, 215);
                --show-details: 0;
            }
            svg {
                .dccircle {display:none;}
                .state > path {
                    cursor: pointer;
                    &:active {
                        cursor: grabbing;
                    }
                    &:hover {
                        filter: brightness(85%);
                    }
                    &.status-trigger {fill: var(--status-color-trigger);}
                    &.status-banned {fill: var(--status-color-banned);}
                    &.status-limited {fill: var(--status-color-limited);}
                    &,.status-unknown {fill: var(--status-color-unknown);}
                    &.status-ok {fill: var(--status-color-ok);}
                    &.status-protected {fill: var(--status-color-protected);}
                    &.status-at-risk {fill: var(--status-color-at-risk);}
                    &.status-other {fill: var(--status-color-other);}
                }
            }
            header {
                display: flex;
                justify-content: space-between;
                align-items: end;
                @media (max-width:600px) {
                    flex-direction: column;
                    align-items: start;
                }
                hgroup {
                    h2 {
                        font-size: small;
                    }
                }
                div {
                    user-select: none;
                    p {
                        margin-top: 0;
                        margin-bottom: 0;
                        text-indent: -2ch;
                        padding-left: 2ch;
                    }
                }
            }
            article {
                overflow-y: scroll;
                background-color: whitesmoke;
                height: 100%;
                position: fixed;
                right: calc(min(80%, 400px) * (var(--show-details) - 1) * 1.2);
                width: min(80%, 400px);
                box-shadow: -4px 0px 5px 0 rgba(0,0,0,0.16),0 2px 10px 0 rgba(0,0,0,0.12);
                transition: right 0.2s linear;
                padding: 1em;
                h1 {
                    display: flex;
                    justify-content: space-between;
                    span:first-of-type {
                        &::first-letter {
                            vertical-align: top;
                        }
                        cursor: pointer;
                        &:active {
                            cursor: grabbing;
                        }
                    }
                }
                h2 {
                    border-bottom: 2px solid currentColor;
                }
            }

            table {
                width: 100%;
                border-collapse: collapse;
                :not(thead) tr:nth-of-type(odd) {
                    background-color: #eeeeee;
                }
                th, td {
                    border: 1px solid currentColor;
                    padding: 0.25em;
                }
                tr td:first-child span:first-child {
                    font-weight: bold;
                }
                tr td:first-child span:first-child::after {
                    content: ':';
                }
                tr td:first-child span:nth-child(2) {
                    font-size: small;
                    cursor: help;
                    display: block;
                }
                tr td:last-child {
                    width: 25%;
                }
            }
        </style>
        <script %{TSMODULE}>
            function nanCoalesce(...args) {
                let a = +args[0];
                for(let i = 0; i < args.length; i++)
                    if(Number.isNaN(+a) && i + 1 < args.length)
                        a = +args[i+1]
                return a;
            }
            function emit(data) {
                for(const [key, value] of Object.entries(data))
                    window[key] = value;
            }
            async function text(path) {
                try {
                    const result = await fetch(path);
                    return result.ok ? await result.text() : null;
                } catch(_) {
                    return null;
                }
            }
            const DATA = JSION.parse(await text(`data.jsion?v=${Math.random().toString().substring(2)}`));
            
            emit({DATA});

            const $map = $`svg.usmap`
            $map.$$self`.state>path`.$forEach(function($state) {
                $state.dataset.name = $state.$self('title').textContent;
                $state.dataset.postalCode = $state.classList[0];
                $state.dataset.json = JSON.stringify(DATA[$state.dataset.postalCode] ?? {});
                $state.$self('title').textContent = `${$state.dataset.name} (${$state.dataset.postalCode.toUpperCase()})`;
                $state.classList.add(`status-${DATA[$state.dataset.postalCode]?.status?.replace(/ /g, '-') ?? 'unknown'}`);   
                $state.$on('click', function(event) {
                    showDetails($state);
                    event.stopPropagation();
                }, {capture: true});
            })
            $map.$on('click', function() {
                hideDetails();
            });
            $`header`.$on('click', function() {
                hideDetails();
            });
            if(Object.keys(DATA).includes(window.location.hash.substring(1))) {
                showDetails($map.$self(`.${window.location.hash.substring(1)}`));
            }
            const $time = $`time`;
            const dataChangedTimestamp = new Date(JSON.parse(await text(`/sitemap.json?v=${Math.random().toString().substring(2)}`))?.['apps']?.['abortionbanmap']?.['data.jsion']*1000);
            $time.datetime = dataChangedTimestamp.toISOString();
            $time.textContent = dataChangedTimestamp.toLocaleString();
        </script>
        <script %{TS}>
            const STATUSES = {
                trigger: 'Banned by trigger law',
                banned: 'Banned',
                limited: 'Limited',
                'at-risk': 'At risk of being banned',
                ok: 'Still Legal',
                protected: 'Protected',
                other: 'Other, see notes',
                unknown: 'Unknown, no data',
            }
            const titleState = JSX.createState('Overview')
            titleState.connectCallback(v=>document.title=`U.S. Abortion Ban Map | ${v}`)
            const toYesNo = (b, invertColors = false) => <>{<b style={`font-size:1.25em;color: var(--status-color-${invertColors ? (b ? 'banned' : 'ok') : (b ? 'ok' : 'banned')});`}> {b ? <>&check;</> : <>&times;</>}</b>} {b ? 'Yes' : 'No'}</>;
            function showDetails($state) {
                titleState.set($state.dataset.name);
                window.location.hash = $state.dataset.postalCode;
                document.documentElement.style.setProperty('--show-details', +true);
                const json = JSON.parse($state.dataset.json)
                const data = {}

                data['Status'] = <>{STATUSES[json.status] ?? 'Unknown'}<hr style={`--color: var(--status-color-${json.status?.replace?.(/ /g,'-') ?? 'unknown'});background-color:var(--color);border: 1px solid var(--color);height:2px;margin-bottom:0;margin-top:4px;`}/></>;

                if('applyAfter' in json) {
                    let value = json.applyAfter;
                    if(typeof value == 'number') value += ' weeks';
                    else value = json.applyAfter;
                    data['Ban Applicable After'] = value;
                }

                function simpleYesNo(object, property, info, invert = false) {
                    if(property in object) {                            
                        data[info] = toYesNo(object[property], invert);
                    }
                }

                simpleYesNo(json, 'global', 'Applies Out of State | Does this ban apply for citizen who go out of state to get an abortion?', true)

                if('penalties' in json) {
                    const penalties = json.penalties;
                    if('fine' in penalties) {
                        const value = penalties.fine;
                        if(typeof value === 'number')
                            data['Fine | Maximum fine you could face'] = `\$${value}`;
                        else 
                            data['Fine | Could you face a fine for getting an abortion?'] = toYesNo(value, true);
                    }
                    if('jail' in penalties) {
                        const value = penalties.fine;
                        if(typeof value === 'number')
                            data['Jail Time | Maximum jail time you could face'] = `${value} years`;
                        else 
                            data['Jail Time | Could you face jail time for getting an abortion?'] = toYesNo(value, true);    
                    }
                    if('isMurder' in penalties) {
                        const value = penalties.isMurder;
                        data['Counts as Murder | Does getting an abortion count as murder?'] = toYesNo(value, true);
                    }
                }

                simpleYesNo(json, 'bansMiscarriages', 'Bans Miscarriages | Does this state also penalize miscarriages?', true);
                simpleYesNo(json, 'bansContraceptives', 'Bans Contraceptives | Does this state also ban contraceptives?', true);

                if('exceptions' in json) {
                    const exceptions = json.exceptions;
                    simpleYesNo(exceptions, 'medical', 'Medical Exception | Is there an exemption to the ban for medical emergencies?');
                    simpleYesNo(exceptions, 'rape', 'Rape Exception | Is there an exemption to the ban for cases of rape?');
                    simpleYesNo(exceptions, 'incest', 'Incest Exception | Is there an exemption to the ban for cases of incest?');
                }

                $`article>section`.replaceChildren(
                    <>
                        <h2>Overview</h2>
                        <table>
                            <tbody>
                                {Object.entries(data).map(([key,value])=>
                                    <tr>
                                        <td>
                                            <span>{key.split(/\|(.*)/s)[0]?.trim?.()}</span>
                                            <span>{key.split(/\|(.*)/s)?.[1]?.trim?.() ?? ''}</span>
                                        </td>
                                        <td>
                                            {value}
                                        </td>
                                    </tr>)}
                            </tbody>
                        </table>
                        {
                            'notes' in json ? <>
                                <h2>Notes</h2>
                                {
                                    Object.assign(<p></p>,{innerHTML:SHML.parseInlineMarkup(json.notes)})
                                }
                            </> : ''
                        }
                        {
                            'links' in json ? <>
                                <h2>Useful Links</h2>
                                <ul>
                                    {
                                        json.links.map(link => <li><a target="_blank" title={link} href={link}>{link}</a></li>)
                                    }
                                </ul>
                            </> : ''
                        }
                    </>
                )
            }
            function hideDetails() {
                document.documentElement.style.setProperty('--show-details', +false);
                titleState.set('Overview');
                window.location.hash = '';
            }
        </script>
    </head>
    <body>
        <span>Last Updated <time><i>Loading...</i></time></span>
            %{
                map=''
                with open('apps/abortionbanmap/map.svg') as file:
                    map=file.read()
                map
            }
        
        <header>
            <hgroup>
                <script %{TS}>$ctx=<h1>U.S. Abortion Ban Map | {titleState}</h1></script>
                <h2>This is <em>not</em> legal advice. This map is a good starting point, but always do your own research to be sure. Information here should be updated and accurate, but no guarantees.</h2>
            </hgroup>
            <script %{TS}>
                
            </script>
            <script %{TS}>
                $ctx=<div>
                  {Object.entries(STATUSES).map(([key,value])=><p><span style={`color:var(--status-color-${key});`}>&#x2B24;</span> {value}</p>)}
                </div>
              </script>
        </header>
        <article>
            <script %{TS}>
                $ctx=<h1><span title="Close" onclick={hideDetails}>&times;</span><span>{titleState} | Details</span></h1>
            </script>
            <section></section>
        </article>
    </body>
</html>