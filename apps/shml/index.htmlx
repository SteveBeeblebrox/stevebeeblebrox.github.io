<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        %{SCRIPTS}
        <title>Untitled</title>
        <script>console.log(`Loaded at ${new Date()}`)</script>
        <style>
            body, html {
                margin: 0;
                padding: 0;
                height: 100%;
            }
            body {
                display: flex;
                flex-direction: column;
            }
            header {
                background-color: brown;
            }
            main {
                flex-grow: 1;
                background-color: dodgerblue;
            }
            footer {
                background-color: darkviolet;
            }
            .flex-distribute {
                display: flex;
                flex-direction: row;
                justify-content: space-between;
                align-items: center;
            }
            .flex-distribute>span:not(:nth-of-type(2)) {
                flex-grow: 1;
                flex-basis: 0;
            }
            .flex-distribute>span:last-of-type {
                text-align: right;
            }
        </style>
        <style type="text/less">
            .flex-distribute {
                display: flex;
                flex-direction: row;
                justify-content: space-between;
                align-items: center;

                &>span:not(:nth-of-type(2)) {
                    flex-grow: 1;
                    flex-basis: 0;
                }
                &>span:last-of-type {
                    text-align: right;
                }
            }
        </style>
        
        
        <script %{TS}>
            const titleState = JSX.createState(document.title);
            const formattedTitleState= titleState.format(o=>o+' - SHML Editor');
            formattedTitleState.connectCallback(t=>document.title=t);

            async function fromArchive(text, password = () => prompt('Enter the password to view document')) {
                let {type, version, compression, encryption, contents} = text.match(/^:(?<type>[\s\S]*?):(?<version>[\s\S]*?):(?:(?<compression>[\s\S]*?):)?(?:(?<encryption>[\s\S]*?):)?\n(?<contents>.*)$/)?.groups
                if(type !== 'SHML')
                    throw new Error(`Unsupported type: ${type}`);
                
                if(compression === 'LZW')
                    contents = LZWCompression.unzip(contents);
                else if(compression !== 'NONE')
                    throw new Error(`Unsupported compression: ${compression}`);
                
                if(encryption === 'AES-GCM')
                    contents = await AESGCMEncryption.decrypt(contents, typeof password === 'string' ? password : password());
                else if(encryption !== 'NONE')
                    throw new Error(`Unsupported encryption: ${encryption}`);
                
                return contents;
            }
            async function toArchive(text, password) {
                if(password != null)
                    text = await AESGCMEncryption.encrypt(text, password);
                return `:SHML:${SHML.VERSION}:LZW:${password != null ? 'AES-GCM' : 'NONE'}:\n${LZWCompression.zip(text)}`;
            }

            window.$on('load', async function() {
                const params = new URLSearchParams(window.location.search);
                //if(params.has('share')) $`div[contenteditable]`.innerText = await fromArchive(decodeURIComponent(params.get('share')))
            });
        </script>
    </head>
    <body>
        <header class="flex-distribute">
            <span>Left</span>
            <script %{TS}>$ctx=<span>{formattedTitleState}</span></script>
            <span>b</span>
        </header>
        <main>
            <!--<div></div>
            <div id="textbox" contenteditable></div>
            <script>
                const textbox = $last;
                textbox.$on('paste', function(event) {
                    event.stopPropagation();
                    event.preventDefault();
                    const selection = window.getSelection();
                    if (!selection.rangeCount) return false;
                    selection.deleteFromDocument();
                    selection.getRangeAt(0).insertNode(document.createTextNode(event.clipboardData.getData('Text')));
                });
            </script>
            <iframe id="preview"></iframe>
            <script>
                const preview = $last;
                new MutationObserver(function() {
                    preview.contentWindow.document.body.innerHTML = SHML.parseMarkup(textbox.innerText);
                }).observe(textbox, {childList: true, subtree: true, characterData: true});
            </script>-->
            foo
        </main>
        <footer class="flex-distribute">
            <span>a</span>
            <span>a</span>
            <script %{TS}>$ctx=<span>v{SHML.VERSION}</span></script>
        </footer>
    </body>
</html>