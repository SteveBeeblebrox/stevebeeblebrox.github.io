<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        %{SCRIPTS}
        <script src="/assets/js/arraymap.min.js"></script>
        <script src="/assets/js/vfs-legacy.min.js"></script>
        <script src="/assets/js/emojis.min.js"></script>
        <title>Untitled</title>
        <script>console.log(`Loaded at ${new Date()}`)</script>
        <style type="text/less">
            body, html {
                margin: 0;
                padding: 0;
                height: 100%;
            }
            body {
                font-family: Arial, Helvetica, sans-serif;
                display: flex;
                flex-direction: column;
            }
            .flex-distribute {
                display: flex;
                flex-direction: row;
                justify-content: space-between;
                align-items: center;

                &>span:not(:nth-of-type(2)) {
                    flex-grow: 1;
                    flex-basis: 0;
                }
                &>span:last-of-type {
                    text-align: right;
                }
            }

            main>div:first-of-type>ol {
                li[data-href^="h1"] {
                    margin-left: 0ch;
                }
                li[data-href^="h2"] {
                    margin-left: 1ch;
                }
                li[data-href^="h3"] {
                    margin-left: 2ch;
                }
                li[data-href^="h4"] {
                    margin-left: 3ch;
                }
                li[data-href^="h5"] {
                    margin-left: 4ch;
                }
                li[data-href^="h6"] {
                    margin-left: 5ch;
                }
            }

            header, footer {
                background-color: silver;
                padding: 0.5em;
            }

            button>svg {
                font-size: 2em;
                height: 1ch;
                width: 1ch;
            }

            input {
                background-color: transparent;
                border: none;
                border-bottom: 1px solid black;
            }
            input, div[contenteditable] {
                color: #333;
                outline: none;
            }
            div[contenteditable] {
                white-space: pre-wrap;
            }
            button {
                cursor: pointer;
                border: none;
                border-radius: 4px;
                display: inline-flex;
                padding: 0.5em;
                &:enabled:hover {
                    filter: brightness(125%);
                }
            }
            main {
                overflow-y: hidden;
                flex-grow: 1;
                background-color: white;
                display: flex;
                &>div {
                    overflow-y: scroll;
                    height: 100%;
                }
                &>div:first-of-type  li {
                    overflow-wrap: break-word;
                }
                &>iframe {
                    border: none;
                    padding-right: 0;
                }
                &>* {
                    flex-grow: 1;
                    flex-basis: 0;
                    padding: 0.5em;
                    margin: 0;
                }
                &>*:first-child {
                    flex-grow: 0.75
                }
                &>div[contenteditable] {
                    background: whitesmoke
                }
                &>:not(:first-child) {
                    padding-top: 0;
                    padding-bottom: 0;
                }
            }
            table,tr {
                max-width: 100%;
                width: 100%;
                border-collapse: collapse;
                td {
                    border: 1px solid black;
                    padding: 0.25em;
                }
                * {
                    overflow-wrap: break-word;
                }
            }
            main>div:first-of-type h1 {
                font-size: 1em;
            }
            @media (max-width:600px) {
                main {
                    flex-direction: column;
                }
                header.flex-distribute {
                    flex-direction: column-reverse;
                    align-items: start;
                    &>* {
                        padding: 0.2em; 
                    }
                    &>span:last-of-type {
                        display: none;
                    }
                }
                main>div:first-of-type {
                    display: none;
                }
            }
        </style>
        
        <script %{TS}>
            const vfs = VFS.load('vfs:main');
            vfs.mkdir(window.location.pathname, true, true);
            vfs.touch(window.location.pathname+'autosave.shml');
            vfs.touch(window.location.pathname+'.filename');

            window.onbeforeunload = () => true;

            let tainted = JSX.createState(false);
            const titleState = JSX.createState('Untitled.shml');
            
            titleState.set(vfs.cat(window.location.pathname+'.filename') || titleState.get());
            titleState.connectCallback(t=>vfs.write(window.location.pathname+'.filename',t) & vfs.save());
        
            const formattedTitleState= titleState.format(o=>o+' - SHML Editor');
            formattedTitleState.connectCallback(t=>document.title=t);

            async function fromArchive(text, password = () => tainted.set(true) && prompt('Enter the password to view document')) {
                if(!text) return `Unknown`;
                try {
                    let {type, version, compression, encryption, contents} = text.match(/^:(?<type>[\s\S]*?):(?<version>[\s\S]*?):(?:(?<compression>[\s\S]*?):)?(?:(?<encryption>[\s\S]*?):)?\n(?<contents>.*)$/)?.groups
                    if(type !== 'SHML')
                        throw new Error(`Unsupported type: ${type}`);
                    
                    if(compression === 'LZW')
                        contents = LZWCompression.unzip(contents);
                    else if(compression === 'ENC-LZW')
                        contents = decodeURIComponent(LZWCompression.unzip(contents));
                    else if(compression !== 'NONE')
                        throw new Error(`Unsupported compression: ${compression}`);
                    
                    if(encryption === 'AES-GCM')
                        contents = await AESGCMEncryption.decrypt(contents, typeof password === 'string' ? password : password());
                    else if(encryption !== 'NONE')
                        throw new Error(`Unsupported encryption: ${encryption}`);
                    return contents;
                } catch(e) {
                    if(e.toString() === 'OperationError') e = 'Bad Password'
                    return `Error: ${e}`
                }
            }
            async function toArchive(text, password) {
                if(password != null)
                    text = await AESGCMEncryption.encrypt(text, typeof password === 'string' ? password : password());
                return `:SHML:${SHML.VERSION}:${text ? 'ENC-LZW' : 'NONE'}:${password != null ? 'AES-GCM' : 'NONE'}:\n${text ? LZWCompression.zip(encodeURIComponent(text)) : text}`;
            }

            window.$on('load', async function() {
                const params = new URLSearchParams(window.location.search);
                if(params.has('share')) {
                    titleState.set('Shared Link')
                    $`div[contenteditable]`.innerText = await fromArchive(decodeURIComponent(params.get('share')));
                }
                else if(vfs.typeOf(window.location.pathname+'autosave.shml') === 'file') {
                    $`div[contenteditable]`.innerText = await fromArchive(vfs.cat(window.location.pathname+'autosave.shml') || '');
                }
                else $`div[contenteditable]`.innerText = '**Welcome**';

                document.body.$on('keydown', function(e) {
                    if(e.key === 'Escape') document.activeElement.blur();
                    else if(e.ctrlKey && e.key.toLowerCase() === 's') {
                        e.preventDefault();
                        e.shiftKey ? actions.download() : actions.save();
                    }
                    else if(e.altKey && e.key === 's') {
                        e.preventDefault();
                        actions.share();
                    }
                });
            });

            function assertSome(x) {
                if(!x) throw 'No value provided';
                else return x;
            }

            const actions = {
                async share() {
                    const url = new URL(window.location);
                    url.searchParams.set('share', await toArchive($`div[contenteditable]`.innerText, tainted.get() ? assetSome(prompt('Enter the password to encrypt document with')) : undefined));
                    await navigator.clipboard.writeText(url);
                    alert('Link copied to clipboard');
                },
                async save() {
                    try {
                        vfs.write(window.location.pathname+'autosave.shml', await toArchive($`div[contenteditable]`.innerText, tainted.get() ? assertSome(prompt('Enter the password to encrypt document with')) : undefined));
                        alert('Saved.');
                    } catch(e) {
                        alert(`Error saving: ${e}`);
                    }
                },
                async open() {
                    const i = <input type="file" accept="text/plain, .md, .shml"/>
                    await new Promise(resolve=>{i.oninput=resolve;i.click()})
                    titleState.set(i.files[0].name);
                    const reader = new FileReader();
                    const e = await new Promise(resolve=>{reader.onload=resolve;reader.readAsText(i.files[0])});
                    $`div[contenteditable]`.innerText = e.target.result;
                },
                async download() {
                    (<a href={`data:text/plain,${encodeURIComponent($`div[contenteditable]`.innerText)}`} download={titleState.get()}></a>).click();
                },
                async publish() {
                    window.open('/apps/shml/published.html?text='+encodeURIComponent(LZWCompression.zip(await toArchive($`div[contenteditable]`.innerText, tainted.get() ? assertSome(prompt('Enter the password to encrypt document with')) : undefined))), '_blank');
                }
            }
        </script>
    </head>
    <body>
        <header class="flex-distribute">
            <span>
                <!-- Icons by Heroicons -->
                <button title="Save (Ctrl+S)" onclick="actions.save()">
                    <svg xmlns="http://www.w3.org/2000/svg (Ctrl+S)" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4" />
                    </svg>
                </button>
                <button title="Open" onclick="actions.open()">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M5 19a2 2 0 01-2-2V7a2 2 0 012-2h4l2 2h4a2 2 0 012 2v1M5 19h14a2 2 0 002-2v-5a2 2 0 00-2-2H9a2 2 0 00-2 2v5a2 2 0 01-2 2z" />
                    </svg>
                </button>
                <button title="Download Text File (Ctrl+Shift+S)" onclick="actions.download()">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                </button>
                <button title="Publish to Web" onclick="actions.publish()">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                    </svg>
                </button>
                <script>(function($last) {tainted.connectCallback(o=>o.disabled=o)})($last);</script>
            </span>
            <script %{TS}>
                $ctx=<span><input value={titleState} oninput={titleState.consume(e=>e.target.value)}/><b> - SHML Editor</b></span>
            </script>
            <span>
                <button title="Share (Alt+S)" onclick="actions.share()">
                    <svg xmlns="http://www.w3.org/2000/svg" class="char" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
                    </svg>
                </button>
            </span>
        </header>
        <main>
            <div>
                <h1>Outline</h1>
                <ol></ol>
                <hr>
                <h1>Properties</h1>
                <table>
                    <thead>
                        <tr><th>Key</th><th>Value</th></tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
            <script %{TS}>
                $ctx=<div contenteditable="true" onpaste={function(event) {
                    event.stopPropagation();
                    event.preventDefault();
                    const selection = window.getSelection();
                    if (!selection.rangeCount) return false;
                    selection.deleteFromDocument();
                    selection.getRangeAt(0).insertNode(document.createTextNode(event.clipboardData.getData('Text')));
                    window.getSelection().collapseToEnd();
                }} onmouseover={function(){this.focus()}} autofocus></div>
            </script>
            <iframe srcdoc="&lt;link rel='stylesheet' href='/assets/css/shml.css'/&gt;"></iframe>
            <script %{TS}>
                (async function($last) {
                    const documentPreview = $last, editableDiv = $`div[contenteditable]`;
                    editableDiv.addEventListener('keydown', event => {
                        if (event.key === 'Enter') {
                            document.execCommand('insertLineBreak')
                            event.preventDefault()
                        }
                    });
                    new MutationObserver(async function() {
                        const result = SHML.parseMarkup(editableDiv.innerText, {get(key) {
                            return Object.hasOwn(emojis, key) ? `<img src="https://emojicdn.elk.sh/${emojis[key]}?style=google" style="height:1em;width:1em;vertical-align:text-top;"/>` : `:${key}:`
                        }});
                        documentPreview.contentWindow.document.body.innerHTML = result.toString();

                        $$('a[href^="#"', documentPreview.contentWindow.document.body).$forEach(a=>a.href=`about:srcdoc${a.hash}`)

                        if(!tainted.get()) {
                            vfs.write(window.location.pathname+'autosave.shml', await toArchive(editableDiv.innerText));
                            vfs.save()
                        }

                        $`main>div:first-of-type>ol`.replaceChildren(...$$('*[id]',documentPreview.contentWindow.document.body).$toArray().map(i=><li data-href={i.id}>{i.textContent}</li>))
                        $`main>div:first-of-type>table>tbody`.replaceChildren(...[...result.properties.entries()].map(([k,v])=><tr><td>{k}</td><td>{v}</td></tr>))
                    }).observe(editableDiv, {childList: true, subtree: true, characterData: true});
                })($last);


            </script>
        </main>
        <footer class="flex-distribute">
            <span>
                <script %{TS}>
                    $ctx=<label><input type="checkbox" checked={tainted} oninput={tainted.consume(e=>e.target.checked)}/>Encrypted sharing <i>(&#9888; Disables auto-save!)</i></label>
                </script>
            </span>
            <span></span>
            <script %{TS}>
                $ctx=<span>SHML v{SHML.VERSION}</span>
            </script>
        </footer>
    </body>
</html>
