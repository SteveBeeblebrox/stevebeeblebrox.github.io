var LZWCompression,GZipCompression;!function(n){n.zip=function(n){try{const o={},t=(n+"").split(""),r=[];let i,s=t[0],p=256;for(let n=1;n<t.length;n++)i=t[n],null!=o[s+i]?s+=i:(r.push(s.length>1?o[s]:s.charCodeAt(0)),o[s+i]=p,p++,s=i);r.push(s.length>1?o[s]:s.charCodeAt(0));for(var e=0;e<r.length;e++)r[e]=String.fromCharCode(r[e]);return function(n){return btoa(unescape(encodeURIComponent(n)))}(r.join(""))}catch(n){throw"Failed to zip string."}},n.unzip=function(n){try{const e=decodeURIComponent(escape(atob(n))),o={},t=(e+"").split("");let r=t[0],i=r;const s=[r];let p,a=256;for(let n=1;n<t.length;n++){let e=t[n].charCodeAt(0);p=e<256?t[n]:o[e]?o[e]:i+r,s.push(p),r=p.charAt(0),o[a]=i+r,a++,i=p}return s.join("")}catch(n){return console.log("Failed to unzip string return empty string",n),""}}}(LZWCompression||(LZWCompression={})),function(n){n.unzipBlob=function(n){const e=new DecompressionStream("gzip"),o=n.stream().pipeThrough(e);return new Response(o).blob()},n.zipBlob=function(n){const e=new CompressionStream("gzip"),o=n.stream().pipeThrough(e);return new Response(o).blob()},n.zip=async function(e){return Base64.encodeBase64FromArray(new Uint8Array(await(await n.zipBlob(new Blob([e]))).arrayBuffer()))},n.unzip=async function(e){return(await n.unzipBlob(new Blob([Base64.decodeBase64ToArray(e)]))).text()}}(GZipCompression||(GZipCompression={}));