class JSONStreamParser extends TransformStream{constructor({skipErrors:r=!1,parseJSON:e=JSON.parse}={}){let t="",s=!1,a=s=>{try{s.enqueue(e(t.replace(/,\s*$/,"")))}catch(e){r||s.error(e)}t=""};super({transform(r,e){if(!s){if(/^[\s\[]$/.test(r))return;s=!0}t+=r,/(?:\r?\n){2}$/.test(t)&&t.trim()&&a(e),"]"===t.trim()&&e.terminate()},flush(r){t.trim()&&a(r),t=""}})}}class JSONStreamStringifier extends TransformStream{constructor({skipErrors:r=!1,stringifyJSON:e=JSON.stringify,endl:t="\n"}={}){let s,a=!1,n=n=>{try{n.enqueue((a?",":"")+t.repeat(2)+e(s)),a=!0}catch(e){r||n.error(e)}};super({start(r){r.enqueue("[")},transform(r,e){void 0!==s&&n(e),s=r},flush(r){void 0!==s&&n(r),s=void 0,r.enqueue(t.repeat(2)+"]")}})}}