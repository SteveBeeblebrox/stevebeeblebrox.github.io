var _a;class ArrayMap{constructor(r=new Map){this.map=r,this[_a]="ArrayMap"}clear(){return this.map.clear()}delete(r,t=!0){return this.apply(r,((r,t)=>t.delete(r)),t?"transparent":"fail")}forEach(r,t){this.map.forEach(((e,a)=>r.call(t,e,[a],this)),t)}get(r,t=!0){return this.apply(r,((r,t)=>t.get(r)),t?"transparent":"fail")}has(r,t=!0){return this.apply(r,((r,t)=>t.has(r)),t?"transparent":"fail")}set(r,t,e=!0){return this.apply(r,((r,e)=>e.set(r,t)),e?"overwrite":"fail"),this}init(r,t=!0){return this.apply(r,((r,t)=>t.set(r,new ArrayMap)),t?"overwrite":"fail"),this}get size(){return this.map.size}entries(){return function*(r){for(const[t,e]of r.map.entries())yield[[t],e]}(this)}keys(){return function*(r){for(const t of r.map.keys())yield[t]}(this)}values(){return this.map.values()}[Symbol.iterator](){return this.entries()}static copy(r){return[...r]}resolve(r,t="fail"){return[(r=ArrayMap.copy(r)).pop(),r.reduce((function(r,e,a){let i=r.get([e]);if(!(i instanceof ArrayMap)||void 0===i)if("overwrite"===t||"transparent"===t&&void 0===i)r.set([e],i=new ArrayMap);else{if("transparent"!==t)throw new Error(`Unable to resolve key, expected map but found "${i}"`);i=new ArrayMap}return i}),this)]}apply(r,t,e="fail"){if(1===r.length)return t(r[0],this.map);{const[a,i]=this.resolve(r,e);return t([a],i)}}}_a=Symbol.toStringTag;