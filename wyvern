#!/bin/bash
USE_EXE='No' #'Yes' if on WSL and you want to use Windows compatible .exe files
WYVERN_DIR='.wyvern' # Where to put dependencies and other files wyvern needs to run

RESOURCE_DIR='.grc' # Where to store fetched grc content
BUILD_DIR='.'

shopt -s extglob

if [[ $USE_EXE == 'Yes' ]]; then
    EXE_SUFFIX=".exe"
else
    EXE_SUFFIX=''
fi

PT="$WYVERN_DIR/pt$EXE_SUFFIX"

mkdir -p "$WYVERN_DIR"
function dep() {
    if [[ ! $(ls "$WYVERN_DIR" | grep "$1$EXE_SUFFIX") ]]; then
        src="https://github.com/SteveBeeblebrox/$1/releases/download/v$2/$1$EXE_SUFFIX"
        echo "Downloading $1$EXE_SUFFIX from $src..."
        wget $src -P "$WYVERN_DIR" 2>/dev/null
        chmod +x "$WYVERN_DIR/$1$EXE_SUFFIX"
    fi
}

dep mless 4.1.2
dep mtsc 5.1.6
dep pt 1.1.0

if [[ ! $(ls "$WYVERN_DIR" | grep generator.py) ]]; then
    cat << 'ENDPY' > "$WYVERN_DIR/generator.py"
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))
import globals as user_globals
import fileinput
import textwrap
import re

def execexpr(script, globals=None, locals=None):
    import ast
    stmts = list(ast.iter_child_nodes(ast.parse(script)))
    if not stmts:
        return None
    if isinstance(stmts[-1], ast.Expr):
        if len(stmts) > 1:
            exec(compile(ast.Module(body=stmts[:-1],type_ignores=[]), filename="<ast>", mode="exec"), globals, locals)
        return eval(compile(ast.Expression(body=stmts[-1].value), filename="<ast>", mode="eval"), globals, locals)
    else:
        return exec(script, globals, locals)

with fileinput.input() as file:
    print(re.sub(                                    \
        r'%{(?P<content>[\s\S]*?)}',                 \
        lambda match: str(execexpr(                  \
            textwrap.dedent(match.group('content')), \
            globals().update({                       \
                key: getattr(user_globals, key)      \
                for key in dir(user_globals)         \
                 if not key.startswith('_')          \
            }),                                      \
            {}                                       \
        ) or '').strip(),                            \
        ''.join([line for line in file])             \
    ), end='')
ENDPY
fi

if [[ ! $(ls | grep globals.py) ]]; then
    touch globals.py
fi

function isnewer {
    [[ $1 -nt $2 || "$FORCE_REBUILD" ]]
}

function mkfile() {
    mkdir -p "$(dirname "$1")" && touch "$1"
}

function tsc() {
    out="$BUILD_DIR/$("$WYVERN_DIR/pt$EXE_SUFFIX" $1 ts~js '(?<=\.m|\.)tsx?$~~js' '(?=\..?js.?$)~~.min')"
    if isnewer "$1" "$out"; then
        mkfile "$out"
        "$WYVERN_DIR/mtsc$EXE_SUFFIX" --target=es2019 --jsx=JSX.createElement $1 --minify --preprocessor=comment --out=- > $out
    fi
}

function less() {
    out="$BUILD_DIR/$("$WYVERN_DIR/pt$EXE_SUFFIX" $1 less~css -e css)"
    if isnewer "$1" "$out"; then
        mkfile "$out"
        "$WYVERN_DIR/mless$EXE_SUFFIX" $1 --out= > $out
    fi
}

function htmlx() {
    out="$BUILD_DIR/$("$WYVERN_DIR/pt$EXE_SUFFIX" $1 -e html)"
    if isnewer "$1" "$out"; then
        mkfile "$out"
        python3 "$WYVERN_DIR/generator.py" $1 | "$WYVERN_DIR/mtsc$EXE_SUFFIX" --verbose --html --target=es2019 --jsx=JSX.createElement --module=es2020 --out | "$WYVERN_DIR/mless$EXE_SUFFIX" --html --verbose --out= > $out
    fi
}

function grc() {
    out="$RESOURCE_DIR/$("$PT" $1 --ext=)"
    if isnewer "$1" "$out"; then
        mkfile "$out"
        curl "$(cat $1)?$(date +%s)" 2>/dev/null > $out
        t_out="$out"
        if compile $out > /dev/null; then
            target="$("$PT" "$out" "$RESOURCE_DIR~.")"
            mkfile "$target"
            mv "$out" "$target"
            find "$BUILD_DIR" -type d -empty -delete
        else
            target="$("$PT" "$t_out" "$RESOURCE_DIR~~$t_BUILD_DIR")"
            mkfile "$target"
            mv "$t_out" "$target"
        fi
    fi
}

function compile() {
    filename="$(basename "$1")"
    echo "Compiling $filename..."

    type="${filename##*.}"
    if [[ "$type" == 'ts' || "$type" == 'mts' || "$type" == 'tsx' || "$type" == 'js' || "$type" == 'mjs' ]]; then
        tsc $1
    elif [[ "$type" == 'less' ]]; then
        less $1
    elif [[ "$type" == 'htmlx' ]]; then
        htmlx $1
    elif [[ "$type" == 'grc' ]]; then
        grc $1
    else
        echo "Unsupported file type: '$type' for file '$1'"
        return 1
    fi

    echo 'Done!'
    return 0
}

function lsext() {
    find | grep -P '\.'$1'$' | grep -Pv '/\.'
}

POSITIONAL_ARGS=()

FORCE_REBUILD=''

if [[ $(ls | grep 'wyvern\.conf') ]]; then
    echo "Reading config file..."
    config=$(cat wyvern.conf)
    if [[ $(echo "$config" | grep '^--out .') ]]; then
        BUILD_DIR="$(echo "$config" | grep -Po '(?<=--out )[^\r\n]*')"
    fi;
    if [[ $(echo "$config" | grep '^--force') ]]; then
        FORCE_REBUILD='YES'
    fi;
fi;

# https://stackoverflow.com/a/14203146
while [[ $# -gt 0 ]]; do
  case $1 in
    # -e|--extension)
    #   EXTENSION="$2"
    #   shift # past argument
    #   shift # past value
    #   ;;
     -o|--out)
       BUILD_DIR="$2"
       shift # past argument
       shift # past value
       ;;
     -f|--force)
       FORCE_REBUILD='YES'
       shift
       ;;
    -*|--*)
      echo "Unknown option '$1'"
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1")
      shift
      ;;
  esac
done

set -- "${POSITIONAL_ARGS[@]}"

ACTION=$1
shift

if [[ "$FORCE_REBUILD" == "YES" && "$BUILD_DIR" != '.' && -n "${BUILD_DIR// /}" && -n "${BUILD_DIR//\//}" ]]; then
    rm -rf "$BUILD_DIR/"
fi
mkdir -p "$BUILD_DIR"

if [ "$ACTION" == 'run' ]; then
    echo "Running webserver on localhost. Stop with ^C"
    (cd "$BUILD_DIR" && python3 -m http.server --bind localhost)
elif [ "$ACTION" == 'help' ]; then
    cat << HELPTEXT
=== Wyvern ===
(C) 2022-2023 Trin Wasinger

No information avalible yet

HELPTEXT
elif [ "$ACTION" == 'link' ]; then
    mkdir -p l
    echo "<!DOCTYPE html><html><head><meta charset=\"UTF-8\"><meta http-equiv=\"refresh\" content=\"0; url=$2\"></head><body><p>Redirecting you to $2</p></body></html>" > l/$1.html
elif [ "$ACTION" == 'build' ]; then
    echo "Starting..."
    if [ $(ls | grep prebuild.sh) ]; then
        source prebuild.sh
    elif [ $(ls | grep pre-build.sh) ]; then
        source pre-build.sh
    fi

    echo "Updating project dependencies..."
    for file in $(lsext grc); do
        grc $file
    done

    echo "Compiling Less..."
    for file in $(lsext less); do
       less $file
    done;

    echo "Compiling TypeScript..."
    for file in $(lsext ts); do
       tsc $file
    done;

    for file in $(lsext mts); do
       tsc $file
    done;

    for file in $(lsext tsx); do
       tsc $file
    done;

    for file in $(find | grep -P '(?<!\.min)\.m?js$' | grep -Pv '/\.'); do
       tsc $file
    done;

    echo "Generating HTML..."
    for file in $(lsext htmlx); do
        htmlx $file
    done;

    if [[ "$BUILD_DIR" != '.' ]]; then
        echo "Copying static files to build dir..."
        for file in $(find -type f | grep -vP '\.(?:htmlx|py|m?tsx?|less|grc|conf)$|^\.\/\.|^\.\/(?:_site|__pycache__)\/|^\.\/wyvern$'); do
            out="$BUILD_DIR/$file"
            mkdir -p $(dirname $out)
            cp $file "$out"
        done;
    fi;

    echo "Generating Sitemap..."
    (cd "$BUILD_DIR" && python3 <(cat << 'ENDPY'
import os
import json

def dirmap(directory_path):
    directory_map ={}

    for entry_name in os.listdir(directory_path):
        if entry_name.startswith('.'):
            continue
        entry_path = os.path.join(directory_path, entry_name)
        if os.path.isfile(entry_path):
            directory_map[entry_name] = os.path.getmtime(entry_path)
        elif os.path.isdir(entry_path):
            directory_map[entry_name] = dirmap(entry_path)

    return directory_map


# Sitemap
# javascript:new Date($timestamp*1000)
try:
    sitemap = open("sitemap.json", "w")
    json.dump(dirmap('.'), sitemap)
except:
    print('Error creating sitemap!')
finally:
    sitemap.close()
ENDPY
    ))

    echo "Finishing..."
    if [ $(ls | grep postbuild.sh) ]; then
        source postbuild.sh
    elif [ $(ls | grep post-build.sh) ]; then
        source post-build.sh
    fi

    echo "Done!"
elif [ "$ACTION" == '' ]; then
    echo "Wyvern is ready"
elif [ "$ACTION" == 'watch' ]; then
    echo "Watching $1. Stop with ^C"
    while true; do
        inotifywait -e modify $1 &>/dev/null && compile $1
    done
elif [ "$ACTION" == 'compile' ]; then
    compile $1
else
    echo "Unknown action '$ACTION'"
fi
